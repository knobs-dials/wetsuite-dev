#!/usr/bin/python3
''' Show colored XML in the shell, 
    optionally with namespaces stripped,
    to try to figure out structure of unseen XML documents with less staring. 

    (and avoiding some external tools/dependencies, e.g. xmllint plus pygmentize)

    Slightly custom for this project, in that there are some namespaces baked in.
'''

from wetsuite.helpers import etree, escape, shellcolor


def ns_format(ns):
    ' known namespaces are shown as a recognizable prefix, the rest are shown {ET-style} '
    if ns in etree.SOME_NS_PREFIXES:
        return '%s:'%shellcolor.red(etree.SOME_NS_PREFIXES[ns])
    else:
        return '{%s}'%shellcolor.red(ns)


def attrib_format(d):
    ' dict to escaped string, with colors '
    ret = []
    for k in d:
        ns, attr = '', k
        if attr[0]=='{':
            ns, attr = attr[1:].split('}',1)
            ns = ns_format(ns)
        #ret.append( '%s%s="%s"'%( ns, shellcolor.brightyellow(attr), shellcolor.yellow(escape.attr(d[k])) ) )
        ret.append( '%s%s=%s%s%s'%(
            ns, shellcolor.brightmagenta(attr),
            shellcolor.darkgray('"'),shellcolor.magenta(escape.attr(d[k])), shellcolor.darkgray('"')
        ) )
    return ' '.join(ret)


def color_print(node, show_attribs=True):
    " can hide attributes, in case you're trying to discern overall structure "
    #TODO: if not stripping namespaces, we need to test for those - see the helper
    ret = []

    is_empty_node = len(node)==0 and node.text is None # no text content or child nodes

    ns, tag = '', node.tag
    if tag[0]=='{':
        ns, tag = tag[1:].split('}',1)
        ns = ns_format(ns)

    if is_empty_node:
        ret.append( '<%s%s'%(ns,shellcolor.cyan(tag)) )
    else:
        ret.append( '<%s%s'%(ns,shellcolor.brightcyan(tag)) )

    if show_attribs and len(node.attrib) > 0:
        ret.append( ' ' )
        ret.append(attrib_format(node.attrib))

    if is_empty_node: # TODO: handle empty tags correctly
        ret.append('/>')
        if node.tail is not None:
            ret.append( node.tail )
        return ''.join(ret)
    ret.append( '>' )

    if node.text is not None:
        ret.append(shellcolor.yellow(node.text) )

    for child in node: # children
        ret.append( color_print( child, show_attribs=show_attribs ) )

    ret.append( '</%s%s>'%( ns,shellcolor.brightcyan(tag)) )

    if node.tail is not None:
        ret.append(shellcolor.yellow(node.tail) )

    return ''.join(ret)



if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-A',"--no-attribs",       action="store_false",  dest="show_attribs",     default=True,   help="don't show attributes")
    parser.add_argument('-N',"--no-namespaces",    action="store_false",  dest="show_namespaces",  default=True,   help="strip namespaces")
    parser.add_argument('-P',"--no-pretty",        action="store_false",  dest="pretty",           default=True,   help="don't reindent")
    parser.add_argument('files',      nargs='+')
    args = parser.parse_args()

    for filename in args.files:
        tree = etree.fromstring(  open(filename,'rb').read()  )

        if not args.show_namespaces:
            tree = etree.strip_namespace(tree)

        if args.pretty:
            tree = etree.indent(tree)

        print( color_print( tree, show_attribs=args.show_attribs ) )
