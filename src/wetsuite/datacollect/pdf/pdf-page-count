## This code first assumed we could use the PDF's text objects, but for this set of PDFs this is incomplete (as the following demonstates)'
print( "COUNTING PDF pages" )
pages_with_text, pages_without_text = 0,0
docs_with_text, docs_without_text = 0,0
for case_i, (case_name, case_pdf_dicts, _) in enumerate(cases):
    print( "NAME: %s"%case_name)
    print( "URLs: %s"%case_pdf_dicts)
    for url in case_pdf_dicts: # for each PDF document
        doc_has_text = False
        print( "== %s =="%wetsuite.helpers.format.url_basename( url ) )
        pdfbytes, _, _ = wetsuite.datacollect.db.cached_fetch(url, dbonly=True, given_conn=conn)
                
        gen = wetsuite.datacollect.pdf.pdf_text.page_text( pdfbytes )
        for page_i, page_text in enumerate(gen):
            lpt = len(page_text)
            print( "Page %d:  %d characters"%(page_i+1, lpt) )
            if lpt < 100:
                pages_without_text += 1
            else:
                pages_with_text += 1
                doc_has_text = True

        if doc_has_text:
            docs_with_text += 1
        else:
            docs_without_text += 1
    
print( "Docs with text:%d    Docs without text:%d"%(docs_with_text, docs_without_text) )
print( "Pages with text:%d   Pages without text:%d"%(pages_with_text, pages_without_text) )
