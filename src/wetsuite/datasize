#!/usr/bin/python3
'''
Finds and caches sizes of 

'''
import os
import sys
import glob
import lzma  # >= py3.3

#import wetsuite.helpers.util
import wetsuite.helpers.localdata
import wetsuite.helpers.format


db_sizes = wetsuite.helpers.localdata.MsgpackKV('dataset_sizes.db')

in_dir = '/var/www/wetsuite/datasets/'
fns = glob.glob( in_dir+'*xz' )
for fn in fns:
    ffn = os.path.join( in_dir, fn )
    stob = os.stat(ffn)

    is_up_to_date = None
    try:
        got_dict = db_sizes.get( ffn )
        if got_dict['mtime'] != stob.st_mtime:
            print('UPDATE, mtime is different, %r'%ffn)
            is_up_to_date = False
    except KeyError:
        is_up_to_date = False
        print('ADD   %r'%ffn)

    if not is_up_to_date:
        set_dict = {
            'compressed_size':stob.st_size
        }
        set_dict['mtime'] = stob.st_mtime

        if ffn.endswith('.xz'): # or file magic, b'\xfd7zXZ\x00\x00'
            print("DETERMINE uncompressed size of %r"%ffn)
            uncompressed_data_size_bytes = 0
            with lzma.open( ffn ) as compressed_file_object:
                while True:
                    data = compressed_file_object.read( 2*1048576 )
                    if len(data) == 0:
                        break
                    uncompressed_data_size_bytes += len( data )
                    print( "\rDecompressing... %3sB    "%(wetsuite.helpers.format.kmgtp( uncompressed_data_size_bytes, kilo=1024 ), ), end='', file=sys.stderr )
        else:
            print( "TODO: handle %r"%ffn )

        set_dict['uncompressed_size'] = uncompressed_data_size_bytes
        
        db_sizes.put(ffn, set_dict)

